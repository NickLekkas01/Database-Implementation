Ζωγόγιαννη Μαρία - 1115201600253
Λέκκας Νικόλαος - 1115201600089

Εργασία Υλοποίησης Βάσεων Δεδομένων

Για την εργασία αυτή χρειάστηκε να υλοποιήσουμε συναρτήσεις εισαγωγής δεδομένων(records) μέσα σε ένα HashTable με τη βοήθεια blocks ώστε να αποθηκεύονται στον δίσκο με τέτοιο τρόπο ώστε να έχουμε γρήγορη εύρεση των records με συγκεκριμένες προδιαγραφές.

Υπάρχουν 2 HashTable, το PrimaryHashTable που αποθηκεύει records με βάση το id και το SecondaryHashTable που αποθηκεύει τα records με βάση το name ή το surname η το address.

Γνωρίζουμε ότι ένα record είναι άδειο στο block αν έχει id = -1

Οι πληροφορίες του hashTable βρίσκονται στο block 0.
Για την μεταφορά του ht_info από τον δίσκο στη μνήμη και το αντίθετο χρειάζεται το memcpy καθώς υπάρχουν στατικά δεδομένα αλλά και δυναμικά δεδομένα που χρειάζονται malloc και αποθηκεύονται σε διαφορετικό σημείο της μνήμης.

Έχουμε το primaryHashTable που είναι ένας πίνακας που θα έχει τα blockIDS των πρώτων block για κάθε bucket του HashTable.
Αντίστοιχα το secondaryHashTable που είναι το ίδιο αλλά για το Secondary.

Τις πληροφορίες των hashTables όπως τον fileDescriptor, το attributeName etc τις αποθηκεύουμε στο πρώτο block άρα στο 0.

Στην CreateIndex ξεκινάμε αρχικοποιώντας όσα blocks όσα είναι τα buckets + άλλο ένα που θα έχει τις πληροφορίες του hashtable(το 1ο)

Στην CreateIndex του Secondary κάνουμε το ίδιο αλλά κάνουμε και συγχρονισμό δηλαδή πάμε και κοιτάμε τα records του PrimaryHashTable και ότι δεν υπάρχει στο SecondaryHashTable το εισάγουμε σε αυτό.

Η OpenIndex και στα δύο HashTable με την βοήθεια του fileName και των BF συναρτήσεων ανοίγουν το αρχείο δίνοντας μας τον fileDescriptor και επιστρέφει τις πληροφορίες του hashTable που φτιάχτηκαν στην CreateIndex.

Η CloseIndex αντίστοιχα κλείνει το αρχείο

Η InsertEntry πηγαίνει στο bucket που έχει τιμή το hash key που βγαίνει απο την hash function με το value του record που επιθυμούμε και σε αυτό(το bucket) με τη βοήθεια του primaryHashTable ή του secondaryHashTable πηγαίνει στο πρώτο block του bucket. Μετά ελέγχει αν είναι γεμάτο από records. Αν δεν είναι βάζει το record εκεί αλλιώς κοιτάει το επόμενο. Αν υπάρχει πηγαίνει στο επόμενο και κοιτάει να βρει αν έχει εκεί χώρο και αν δεν έχει ούτε εκεί πάει στο επόμενο μέχρι να βρει. Αν φτάσει σε περίπτωση που δεν υπάρχει επόμενο block που να μην είναι γεμάτο τότε φτιάχνει ένα καινούργιο άδειο στο οποίο πλέον θα μπορεί να βάλει το record προσέχωντας το προηγούμενο να κρατήσει την πληροφορία του blockId του block που μόλις φτιάξαμε. Η διαδικασία είναι ίδια και για το Primary και για το Secondary με την διαφορά ότι στο Primary δεν υπάρχουν διπλότυπα(το ελέγχουμε με την recordExists) ενώ στην Secondary μπορεί να υπάρχουν.

Η DeleteEntry για το PrimaryHashTable παίρνει το value ώστε να καταλάβει ποιο record θέλει να διαγράψει, βρίσκει το hash key με το hashfunction ώστε να πάει στο σωστό bucket και από εκεί με την primaryHashTable πάει στο πρώτο block του bucket. Από εκεί ξεκινάει η αναζήτηση του record που μας ενδιαφέρει κοιτώντας τα block ένα-ένα. Όταν το βρει πάει και κάνει το id = -1 ώστε να φαίνεται ως διαγραμμένο και να μπορούμε να καταλάβουμε μετά σε επόμενο insert ή διάβασμα ότι η θέση είναι ελευθερη. Αν δεν υπάρχει επιστρέφει -1.

Η GetAllEntries για το Primary ψάχνει όλα τα buckets του primaryHashTable και όλα τα blocks και εμφανίζει τα records που έχουν value(id) αυτό που δίνουμε ως όρισμα. Το GetAllEntries στο SecondaryHashTable ψάχνει όλο το secondaryHashTable και για τα records που έχουν τιμή ίδια με το value που δίνεται ως όρισμα(name ή surname ή address) καλούμε το block από το PrimaryHashTable με id το blockID που έχει αποθηκευμένο ως πληροφορία το SecondaryHashTable για κάθε record. Έτσι από το secondary με record με τιμή value πάμε στο primary με τη βοήθεια του αποθηκευμένου blockID και βρίσκουμε το αντίστοιχο record στο Primary και το εμφανίζουμε.

Η recordExists είναι μια βοηθητική συνάρτηση η οποία δουλεύει και για τα 2 HashTable και ψάχνει τα blocks στο bucket που αντιστοιχεί το hash key του id που δίνουμε ως όρισμα και ψάχνει ένα ένα τα records. Αν το βρει επιστρέφει το blockID του block που βρισκόταν το Record και υποδεικνύει ότι υπάρχει. Αν δε βρεθεί επιστρέφει -1.
